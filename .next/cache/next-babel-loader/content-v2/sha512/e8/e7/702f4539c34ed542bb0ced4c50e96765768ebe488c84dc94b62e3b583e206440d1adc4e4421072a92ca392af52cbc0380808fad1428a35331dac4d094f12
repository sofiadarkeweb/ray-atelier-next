{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sofiadarke/Dropbox/Hyper Island/09 individual project/Ray/ray-atelier-next/pages/projects/[slug].js\";\nimport { createClient } from \"contentful\";\nimport Image from \"next/image\";\nconst client = createClient({\n  space: process.env.CONTENFUL_SPACE_ID,\n  accessToken: process.env.CONTENFUL_ACCESS_KEY\n});\nexport const getStaticPaths = async () => {\n  const res = await client.getEntries({\n    content_type: \"portfolioProject\"\n  });\n  const paths = res.items.map(item => {\n    //why items?\n    return {\n      params: {\n        slug: item.fields.slug\n      }\n    };\n  }); // paths: paths can be shortened to just path, because its the same\n\n  return {\n    paths,\n    fallback: false\n  };\n};\nexport async function getStaticProps({\n  params\n}) {\n  const {\n    items\n  } = await client.getEntries({\n    //intead of all res, get items\n    content_type: \"portfolioProject\",\n    \"fields.slug\": params.slug\n  });\n  return {\n    props: {\n      portfolioProject: items[0]\n    }\n  };\n} // how to output several images in different formats?\n\nexport default function ProjectDetails({\n  portfolioProject\n}) {\n  const {\n    projectTitle,\n    description,\n    year,\n    featuredImage,\n    projectImages\n  } = portfolioProject.fields;\n  console.log(projectImages);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"project-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"feat-img\",\n      children: /*#__PURE__*/_jsxDEV(Image, {\n        src: \"https:\" + featuredImage.fields.file.url,\n        width: featuredImage.fields.file.details.image.width,\n        height: featuredImage.fields.file.details.image.height,\n        objectFit: \"contain\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: projectTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: year\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 3\n  }, this);\n}","map":{"version":3,"sources":["/Users/sofiadarke/Dropbox/Hyper Island/09 individual project/Ray/ray-atelier-next/pages/projects/[slug].js"],"names":["createClient","Image","client","space","process","env","CONTENFUL_SPACE_ID","accessToken","CONTENFUL_ACCESS_KEY","getStaticPaths","res","getEntries","content_type","paths","items","map","item","params","slug","fields","fallback","getStaticProps","props","portfolioProject","ProjectDetails","projectTitle","description","year","featuredImage","projectImages","console","log","file","url","details","image","width","height"],"mappings":";;AAAA,SAASA,YAAT,QAA6B,YAA7B;AACA,OAAOC,KAAP,MAAkB,YAAlB;AAEA,MAAMC,MAAM,GAAGF,YAAY,CAAC;AAC3BG,EAAAA,KAAK,EAAEC,OAAO,CAACC,GAAR,CAAYC,kBADQ;AAE3BC,EAAAA,WAAW,EAAEH,OAAO,CAACC,GAAR,CAAYG;AAFE,CAAD,CAA3B;AAKA,OAAO,MAAMC,cAAc,GAAG,YAAY;AACzC,QAAMC,GAAG,GAAG,MAAMR,MAAM,CAACS,UAAP,CAAkB;AACnCC,IAAAA,YAAY,EAAE;AADqB,GAAlB,CAAlB;AAGA,QAAMC,KAAK,GAAGH,GAAG,CAACI,KAAJ,CAAUC,GAAV,CAAeC,IAAD,IAAU;AACrC;AACA,WAAO;AACNC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,IAAI,EAAEF,IAAI,CAACG,MAAL,CAAYD;AAApB;AADF,KAAP;AAGA,GALa,CAAd,CAJyC,CAWzC;;AACA,SAAO;AACNL,IAAAA,KADM;AAENO,IAAAA,QAAQ,EAAE;AAFJ,GAAP;AAIA,CAhBM;AAkBP,OAAO,eAAeC,cAAf,CAA8B;AAAEJ,EAAAA;AAAF,CAA9B,EAA0C;AAChD,QAAM;AAAEH,IAAAA;AAAF,MAAY,MAAMZ,MAAM,CAACS,UAAP,CAAkB;AACzC;AACAC,IAAAA,YAAY,EAAE,kBAF2B;AAGzC,mBAAeK,MAAM,CAACC;AAHmB,GAAlB,CAAxB;AAMA,SAAO;AACNI,IAAAA,KAAK,EAAE;AAAEC,MAAAA,gBAAgB,EAAET,KAAK,CAAC,CAAD;AAAzB;AADD,GAAP;AAGA,C,CAED;;AACA,eAAe,SAASU,cAAT,CAAwB;AAAED,EAAAA;AAAF,CAAxB,EAA8C;AAC5D,QAAM;AAAEE,IAAAA,YAAF;AAAgBC,IAAAA,WAAhB;AAA6BC,IAAAA,IAA7B;AAAmCC,IAAAA,aAAnC;AAAkDC,IAAAA;AAAlD,MACLN,gBAAgB,CAACJ,MADlB;AAEAW,EAAAA,OAAO,CAACC,GAAR,CAAYF,aAAZ;AACA,sBACC;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,4BACC;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,6BACC,QAAC,KAAD;AACC,QAAA,GAAG,EAAE,WAAWD,aAAa,CAACT,MAAd,CAAqBa,IAArB,CAA0BC,GAD3C;AAEC,QAAA,KAAK,EAAEL,aAAa,CAACT,MAAd,CAAqBa,IAArB,CAA0BE,OAA1B,CAAkCC,KAAlC,CAAwCC,KAFhD;AAGC,QAAA,MAAM,EAAER,aAAa,CAACT,MAAd,CAAqBa,IAArB,CAA0BE,OAA1B,CAAkCC,KAAlC,CAAwCE,MAHjD;AAIC,QAAA,SAAS,EAAC;AAJX;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YADD,eASC;AAAA,gBAAKZ;AAAL;AAAA;AAAA;AAAA;AAAA,YATD,eAUC;AAAA,gBAAIE;AAAJ;AAAA;AAAA;AAAA;AAAA,YAVD,eAWC;AAAA,gBAAID;AAAJ;AAAA;AAAA;AAAA;AAAA,YAXD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAmBA","sourcesContent":["import { createClient } from \"contentful\";\nimport Image from \"next/image\";\n\nconst client = createClient({\n\tspace: process.env.CONTENFUL_SPACE_ID,\n\taccessToken: process.env.CONTENFUL_ACCESS_KEY,\n});\n\nexport const getStaticPaths = async () => {\n\tconst res = await client.getEntries({\n\t\tcontent_type: \"portfolioProject\",\n\t});\n\tconst paths = res.items.map((item) => {\n\t\t//why items?\n\t\treturn {\n\t\t\tparams: { slug: item.fields.slug },\n\t\t};\n\t});\n\n\t// paths: paths can be shortened to just path, because its the same\n\treturn {\n\t\tpaths,\n\t\tfallback: false,\n\t};\n};\n\nexport async function getStaticProps({ params }) {\n\tconst { items } = await client.getEntries({\n\t\t//intead of all res, get items\n\t\tcontent_type: \"portfolioProject\",\n\t\t\"fields.slug\": params.slug,\n\t});\n\n\treturn {\n\t\tprops: { portfolioProject: items[0] },\n\t};\n}\n\n// how to output several images in different formats?\nexport default function ProjectDetails({ portfolioProject }) {\n\tconst { projectTitle, description, year, featuredImage, projectImages } =\n\t\tportfolioProject.fields;\n\tconsole.log(projectImages);\n\treturn (\n\t\t<div className=\"project-page\">\n\t\t\t<div className=\"feat-img\">\n\t\t\t\t<Image\n\t\t\t\t\tsrc={\"https:\" + featuredImage.fields.file.url}\n\t\t\t\t\twidth={featuredImage.fields.file.details.image.width}\n\t\t\t\t\theight={featuredImage.fields.file.details.image.height}\n\t\t\t\t\tobjectFit=\"contain\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<h2>{projectTitle}</h2>\n\t\t\t<p>{year}</p>\n\t\t\t<p>{description}</p>\n\n\t\t\t{/* {projectImages.map((img) => (\n\t\t\t\t<Image key={img} />\n\t\t\t))} */}\n\t\t</div>\n\t);\n}\n"]},"metadata":{},"sourceType":"module"}