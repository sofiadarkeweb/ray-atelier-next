{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sofiadarke/Dropbox/Hyper Island/09 individual project/Ray/ray-atelier-next/pages/projects/[slug].js\";\nimport { createClient } from \"contentful\";\nimport Image from \"next/image\";\nimport Link from \"next/link\";\nimport Masonry from \"react-masonry-css\";\nconst client = createClient({\n  space: process.env.CONTENFUL_SPACE_ID,\n  accessToken: process.env.CONTENFUL_ACCESS_KEY\n});\nexport const getStaticPaths = async () => {\n  const res = await client.getEntries({\n    content_type: \"portfolioProject\"\n  });\n  const paths = res.items.map(item => {\n    //why items?\n    return {\n      params: {\n        slug: item.fields.slug\n      }\n    };\n  }); // paths: paths can be shortened to just path, because its the same\n\n  return {\n    paths,\n    fallback: false\n  };\n};\nexport async function getStaticProps({\n  params\n}) {\n  const {\n    items\n  } = await client.getEntries({\n    //intead of all res, get items\n    content_type: \"portfolioProject\",\n    \"fields.slug\": params.slug\n  });\n  return {\n    props: {\n      portfolioProject: items[0]\n    }\n  };\n} // how to output several images in different formats?\n\nexport default function ProjectDetails({\n  portfolioProject\n}) {\n  const breakpointColumnsObj = {\n    default: 2,\n    500: 1\n  };\n  const {\n    projectTitle,\n    description,\n    year,\n    featuredImage,\n    projectImages,\n    slug\n  } = portfolioProject.fields; // console.log(portfolioProject);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"project-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"feat-img\",\n      children: /*#__PURE__*/_jsxDEV(Image, {\n        src: \"https:\" + featuredImage.fields.file.url,\n        width: featuredImage.fields.file.details.image.width,\n        height: featuredImage.fields.file.details.image.height,\n        objectFit: \"contain\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"project-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: year\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: projectTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Masonry, {\n      breakpointCols: breakpointColumnsObj,\n      className: \"my-masonry-grid\",\n      columnClassName: \"my-masonry-grid_column\",\n      children: projectImages && projectImages.map(img =>\n      /*#__PURE__*/\n      // const isPORTRAIT 0=img.width greate than img.height. use reduce, to rearrange the order. is this a portrai image, find next portrait\n      _jsxDEV(\"div\", {\n        className: \"masonry-img\",\n        children: [/*#__PURE__*/_jsxDEV(Image, {\n          src: \"https:\" + img.fields.file.url,\n          width: img.fields.file.details.image.width,\n          height: img.fields.file.details.image.height\n        }, img.sys.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"caption\",\n          children: img.fields.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 8\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      href: \"/ + {slug}\",\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        children: \"Next project\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 3\n  }, this);\n}","map":{"version":3,"sources":["/Users/sofiadarke/Dropbox/Hyper Island/09 individual project/Ray/ray-atelier-next/pages/projects/[slug].js"],"names":["createClient","Image","Link","Masonry","client","space","process","env","CONTENFUL_SPACE_ID","accessToken","CONTENFUL_ACCESS_KEY","getStaticPaths","res","getEntries","content_type","paths","items","map","item","params","slug","fields","fallback","getStaticProps","props","portfolioProject","ProjectDetails","breakpointColumnsObj","default","projectTitle","description","year","featuredImage","projectImages","file","url","details","image","width","height","img","sys","id"],"mappings":"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","sourcesContent":["import { createClient } from \"contentful\";\nimport Image from \"next/image\";\nimport Link from \"next/link\";\nimport Masonry from \"react-masonry-css\";\n\nconst client = createClient({\n\tspace: process.env.CONTENFUL_SPACE_ID,\n\taccessToken: process.env.CONTENFUL_ACCESS_KEY,\n});\n\nexport const getStaticPaths = async () => {\n\tconst res = await client.getEntries({\n\t\tcontent_type: \"portfolioProject\",\n\t});\n\tconst paths = res.items.map((item) => {\n\t\t//why items?\n\t\treturn {\n\t\t\tparams: { slug: item.fields.slug },\n\t\t};\n\t});\n\n\t// paths: paths can be shortened to just path, because its the same\n\treturn {\n\t\tpaths,\n\t\tfallback: false,\n\t};\n};\n\nexport async function getStaticProps({ params }) {\n\tconst { items } = await client.getEntries({\n\t\t//intead of all res, get items\n\t\tcontent_type: \"portfolioProject\",\n\t\t\"fields.slug\": params.slug,\n\t});\n\n\treturn {\n\t\tprops: { portfolioProject: items[0] },\n\t};\n}\n\n// how to output several images in different formats?\nexport default function ProjectDetails({ portfolioProject }) {\n\tconst breakpointColumnsObj = {\n\t\tdefault: 2,\n\t\t500: 1,\n\t};\n\n\tconst {\n\t\tprojectTitle,\n\t\tdescription,\n\t\tyear,\n\t\tfeaturedImage,\n\t\tprojectImages,\n\t\tslug,\n\t} = portfolioProject.fields;\n\t// console.log(portfolioProject);\n\n\treturn (\n\t\t<div className=\"project-page\">\n\t\t\t<div className=\"feat-img\">\n\t\t\t\t<Image\n\t\t\t\t\tsrc={\"https:\" + featuredImage.fields.file.url}\n\t\t\t\t\twidth={featuredImage.fields.file.details.image.width}\n\t\t\t\t\theight={featuredImage.fields.file.details.image.height}\n\t\t\t\t\tobjectFit=\"contain\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div className=\"project-content\">\n\t\t\t\t<p>{year}</p>\n\t\t\t\t<h2>{projectTitle}</h2>\n\t\t\t\t<p>{description}</p>\n\t\t\t</div>\n\t\t\t{/* <Image\n\t\t\t\tsrc={\"https:\" + projectImages[0].fields.file.url}\n\t\t\t\twidth={projectImages[0].fields.file.details.image.width}\n\t\t\t\theight={projectImages[0].fields.file.details.image.height}\n\t\t\t/> */}\n\n\t\t\t<Masonry\n\t\t\t\tbreakpointCols={breakpointColumnsObj}\n\t\t\t\tclassName=\"my-masonry-grid\"\n\t\t\t\tcolumnClassName=\"my-masonry-grid_column\"\n\t\t\t>\n\t\t\t\t{/* console.log({projectImages}) */}\n\t\t\t\t{projectImages &&\n\t\t\t\t\tprojectImages.map((img) => (\n\t\t\t\t\t\t// const isPORTRAIT 0=img.width greate than img.height. use reduce, to rearrange the order. is this a portrai image, find next portrait\n\t\t\t\t\t\t<div className=\"masonry-img\">\n\t\t\t\t\t\t\t<Image\n\t\t\t\t\t\t\t\tkey={img.sys.id}\n\t\t\t\t\t\t\t\tsrc={\"https:\" + img.fields.file.url}\n\t\t\t\t\t\t\t\twidth={img.fields.file.details.image.width}\n\t\t\t\t\t\t\t\theight={img.fields.file.details.image.height}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<span className=\"caption\">{img.fields.description}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))}\n\t\t\t</Masonry>\n\t\t\t<Link href=\"/ + {slug}\">\n\t\t\t\t<a>Next project</a>\n\t\t\t</Link>\n\t\t</div>\n\t);\n}\n"]},"metadata":{},"sourceType":"module"}